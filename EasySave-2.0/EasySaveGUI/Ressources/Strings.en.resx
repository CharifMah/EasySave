<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    Version 2.0
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    Example:
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.
    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="SelectedLanguage" xml:space="preserve">
    <value>You have selected English.</value>
  </data>
  <data name="InvalideSelection" xml:space="preserve">
    <value>Invalid selection.</value>
  </data>
  <data name="ChooseLang" xml:space="preserve">
    <value>Select language</value>
  </data>
  <data name="ListJobs" xml:space="preserve">
    <value>List jobs</value>
  </data>
  <data name="LoadJobs" xml:space="preserve">
    <value>Load jobs</value>
  </data>
  <data name="CreateJob" xml:space="preserve">
    <value>Create a job</value>
  </data>
  <data name="RunJobs" xml:space="preserve">
    <value>Run jobs</value>
  </data>
  <data name="SelectChoice" xml:space="preserve">
    <value>Please enter your choice : </value>
  </data>
  <data name="YouSelected" xml:space="preserve">
    <value>You have selected : </value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="NoJobCreated" xml:space="preserve">
    <value>No jobs created</value>
  </data>
  <data name="SourceDir" xml:space="preserve">
    <value>Source directory</value>
  </data>
  <data name="TargetDir" xml:space="preserve">
    <value>Target directory</value>
  </data>
  <data name="PossibleTypeBackup" xml:space="preserve">
    <value>Possible backup types</value>
  </data>
  <data name="JobCreated" xml:space="preserve">
    <value>Job created</value>
  </data>
  <data name="JobNotCreated" xml:space="preserve">
    <value>The job was not created</value>
  </data>
  <data name="Lang" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LoadJobConfig" xml:space="preserve">
    <value>Load a Jobs configuration</value>
  </data>
  <data name="DeleteJob" xml:space="preserve">
    <value>Delete a job</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="Quit" xml:space="preserve">
    <value>Exit</value>
    </data>
  <data name="Confirm" xml:space="preserve">
    <value>Please confirm : (y/n) : </value>
  </data>
  <data name="InvalidIndice" xml:space="preserve">
    <value>Invalid indice detected</value>
  </data>
  <data name="SelectRangeJobs" xml:space="preserve">
    <value>Select the range of jobs you want to run</value>
  </data>
  <data name="StartIndex" xml:space="preserve">
    <value>Start index : </value>
  </data>
  <data name="AdditionalJobs" xml:space="preserve">
    <value>Do you want to choose additional jobs individually ? y/n : </value>
  </data>
  <data name="IndividualIndex" xml:space="preserve">
    <value>Individual index ('q' to complete typing) : </value>
  </data>
  <data name="SourceDirectory" xml:space="preserve">
    <value>Source Directory : </value>
  </data>
  <data name="TargetDirectory" xml:space="preserve">
    <value>Target Directory : </value>
  </data>
  <data name="TotalSize" xml:space="preserve">
    <value>Total size : </value>
  </data>
  <data name="bytes" xml:space="preserve">
    <value> bytes</value>
  </data>
  <data name="SelectConfigurationFile" xml:space="preserve">
    <value>Select a configuration file</value>
  </data>
  <data name="Loaded" xml:space="preserve">
    <value>Loaded</value>
  </data>
  <data name="WithoutJobLoaded" xml:space="preserve">
    <value>Loaded without jobs</value>
  </data>
  <data name="InputFormat" xml:space="preserve">
    <value>Input format :</value>
  </data>
  <data name="SingleIndex" xml:space="preserve">
    <value>For a single index, (for example : 2).</value>
  </data>
  <data name="MultipleIndexes" xml:space="preserve">
    <value>For multiple indexes, (for example : 2,4,6).</value>
  </data>
  <data name="RangeIndexes" xml:space="preserve">
    <value>For a range of indexes, (for example : 1-3).</value>
  </data>
  <data name="CombineIndexes" xml:space="preserve">
    <value>To combine indexes and intervals, (for exemple : 1-3,5).</value>
  </data>
  <data name="DefaultFile" xml:space="preserve">
    <value>Default file</value>
  </data>
  <data name="OtherFile" xml:space="preserve">
    <value>Other file</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="InvalidIndexRange" xml:space="preserve">
    <value>Invalid indexes range, the number of availablejob is </value>
  </data>
  <data name="TimeElapsed" xml:space="preserve">
    <value>Time Elapsed: </value>
  </data>
  <data name="ClearConsole" xml:space="preserve">
    <value>Clear the console</value>
  </data>
  <data name="PasteClipboard" xml:space="preserve">
    <value>Paste the current clipboard text</value>
  </data>
  <data name="EnterFolderPath" xml:space="preserve">
    <value>Enter folder path: </value>
  </data>
  <data name="EnterFilePath" xml:space="preserve">
    <value>Enter file path: </value>
  </data>
  <data name="SamePath" xml:space="preserve">
    <value>The source path and the target path are the same</value>
  </data>
  <data name="PathNotReachable" xml:space="preserve">
    <value>The source or target path does not exist or is not accessible.</value>
  </data>
  <data name="JobDeleteError" xml:space="preserve">
    <value>Job deletion error</value>
  </data>
  <data name="JobsDeleted" xml:space="preserve">
    <value>The selected jobs have been deleted.</value>
  </data>
  <data name="CopyEnd" xml:space="preserve">
    <value>copy end</value>
  </data>
  <data name="Saved" xml:space="preserve">
    <value>saved</value>
  </data>
  <data name="JobCreation" xml:space="preserve">
    <value>Job creation</value>
  </data>
  <data name="DeletingJobs" xml:space="preserve">
    <value>Deleting jobs</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="IsActive" xml:space="preserve">
    <value>Is Active</value>
  </data>
  <data name="ChangeFormatLogs" xml:space="preserve">
    <value>Change log file format to JSON/XML</value>
  </data>
  <data name="FormatLogs" xml:space="preserve">
    <value>Logs format</value>
  </data>
  <data name="SelectedFormatLogs" xml:space="preserve">
    <value>You have chosen the log file format  :</value>
  </data>
  <data name="CurrentFormat" xml:space="preserve">
    <value>Current format :</value>
  </data>
</root>