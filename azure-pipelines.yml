trigger:
  branches:
    include:
    - livrable-1

pool:
  name: 'my-agent-pool'

variables:
    BuildPlatform: 'Any CPU'
    BuildConfiguration: 'Release'
    BasePath: 'EasySave-G4-FISA-24/' # Chemin de base vers le dossier du code
    Solution: '$(BasePath)**/*.sln'
    RestoreBuildProjects: '$(BasePath)**/*.csproj'
    # Exclure explicitement les projets de test de cette variable pour éviter leur publication
    PublishProjects: '$(BasePath)**/*.csproj;-:**/*UnitTestStorage/**/*.csproj'
    TestProjects: '$(BasePath)**/*UnitTestStorage/*.csproj'
    PublishFolder: '$(build.artifactstagingdirectory)/publish'

steps:

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(RestoreBuildProjects)'
    feedsToUse: 'select'
    noCache: true
    verbosityRestore: 'Diagnostic'
  
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(RestoreBuildProjects)'
    arguments: '--configuration $(BuildConfiguration)'
  
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '$(TestProjects)'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: False
    projects: '$(PublishProjects)'
    arguments: '--configuration $(BuildConfiguration) --output $(PublishFolder)'
    zipAfterPublish: False # Changez ceci pour éviter le zip individuel

# Utilisez une tâche personnalisée pour zipper tout le contenu de PublishFolder en un seul fichier ZIP
- task: ArchiveFiles@2
  displayName: 'Zip Publish Folder'
  inputs:
    rootFolderOrFile: '$(PublishFolder)'
    includeRootFolder: False
    archiveType: 'zip'
    archiveFile: '$(build.artifactstagingdirectory)/EasySave.zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/EasySave.zip'